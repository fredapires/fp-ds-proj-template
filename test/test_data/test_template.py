# generated by chatGPT on 01/27/23

# TODO: create docstrings for these classes/functions :noted_on:2023-01-29

import pytest
import pandas as pd


class TestPandasDataFrame:
    def test_dataframe_creation(self):
        data = {"col1": [1, 2, 3], "col2": [4, 5, 6]}
        df = pd.DataFrame(data)
        assert df.shape == (3, 2)

    def test_column_sum(self):
        data = {"col1": [1, 2, 3], "col2": [4, 5, 6]}
        df = pd.DataFrame(data)
        assert df["col1"].sum() == 6

    def test_column_mean(self):
        data = {"col1": [1, 2, 3], "col2": [4, 5, 6]}
        df = pd.DataFrame(data)
        assert df["col2"].mean() == 5.0

    @pytest.fixture
    def setup_df(self):
        data = {"col1": [1, 2, 3], "col2": [4, 5, 6]}
        df = pd.DataFrame(data)
        return df

    def test_df_shape(self, setup_df):
        assert setup_df.shape == (3, 2)

    def test_df_column_sum(self, setup_df):
        assert setup_df["col1"].sum() == 6

    def test_df_column_mean(self, setup_df):
        assert setup_df["col2"].mean() == 5.0


class TestPandasSetup:
    @classmethod
    def setup_class(cls):
        print("Setting up class")
        data = {"col1": [1, 2, 3], "col2": [4, 5, 6]}
        cls.df = pd.DataFrame(data)

    @classmethod
    def teardown_class(cls):
        print("Tearing down class")
        del cls.df


class TestPandasTearDown:
    def setup_method(self):
        print("Setting up method")
        data = {"col1": [1, 2, 3], "col2": [4, 5, 6]}
        self.df = pd.DataFrame(data)

    def teardown_method(self):
        print("Tearing down method")
        del self.df

# -------------
# generate testing data


def generate_testing_df(n_rows):
    from faker import Faker
    fake = Faker()
    data = []
    for i in range(n_rows):
        data.append(
            {
                "name": fake.name(),
                "email": fake.email(),
                "address": fake.address(),
                "phone_number": fake.phone_number(),
                "date_time": fake.date_time(),
                "job": fake.job(),
                "text": fake.text(),
            }
        )
    df = pd.DataFrame(data)
    return df
